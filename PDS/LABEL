         MACRO
.*--------------------------------------------------------------------*
.*                                                                    *
.*  This macro provides a method to trace program execution in        *
.*  assembler language programs.  The macro replaces the 'EQU *'      *
.*  or 'DS 0H' commonly used to define labels.  The names used in the *
.*  "label" field are stored in an in core "wrap-around" table.       *
.*                                                                    *
.*   The 'TRACE' keyword allows you to turn tracing on and off        *
.*   at various points.  This parameter sets a global switch          *
.*   so if trace is turned off at some point, the following LABEL     *
.*   macros will not cause tracing until you turn TRACE back on.      *
.*   This may prevent the trace table from becoming flooded with      *
.*   trace entries you do not need for problem determination.         *
.*   Also, after the program is debugged, code 'TRACE=OFF' or         *
.*   'TRACE=NO' on the first LABEL macro and there will be zero       *
.*   overhead in storage use or execution time (all the macro         *
.*   will generate will be the actual assembler label).               *
.*                                                                    *
.*   Overhead is 12 bytes per LABEL, plus the size of the trace       *
.*   routine (generated via "LABEL TRACE=ROUTINE"), plus the size     *
.*   of the trace table (dynamically acquired, but not freed).        *
.*   You probably don't want to just leave the trace stuff on once    *
.*   you get the program working because the trace table is not       *
.*   freed.  There is some execution time overhead also, of course.   *
.*                                                                    *
.*   The macro uses and changes register 15.  On the first call,      *
.*   the code will issue a GETMAIN.  GETMAIN uses registers 0, 1,     *
.*   14, and 15.                                                      *
.*                                                                    *
.*   The trace routine uses in-line work areas, so programs using     *
.*   the LABEL macro are not re-entrant.                              *
.*                                                                    *
.*   There are three eyecatchers in the trace routine to help you     *
.*   find the trace table.  These are "TRACE1ST", "TRACECUR", and     *
.*   "TRACELST".  TRACECUR will be the last entry added.  Good news   *
.*   is if your program abends, all you have to do is find the        *
.*   eyecatchers and get the addresses.  Bad news is if your program  *
.*   runs, but just doesn't work correctly, you will have to cause    *
.*   an abend in order to get a dump.                                 *
.*                                                                    *
.*                                                                    *
.*--------------------------------------------------------------------*
&NAME    LABEL &TRACE=
         GBLB  &LBLCTL
         LCLC  &LNAME
         AIF   (T'&TRACE EQ 'O').LBL0040
         AIF   ('&TRACE' EQ 'ROUTINE').GENMOD
         AIF   ('&TRACE' EQ 'ON').LBL0010
         AIF   ('&TRACE' EQ 'YES').LBL0010
         AIF   ('&TRACE' EQ 'OFF').LBL0020
         AIF   ('&TRACE' EQ 'NO').LBL0020
         MNOTE 12,'INVALID VALUE ''TRACE=&TRACE'' '
.LBL0010 ANOP
&LBLCTL  SETB  0
         AGO   .LBL0030
.LBL0020 ANOP
&LBLCTL  SETB  1
.LBL0030 ANOP
&LNAME   SETC  ' '
.LBL0040 ANOP
         AIF   (T'&NAME NE 'O').LBL0050
         MNOTE 4,'** WARNING, NAME OMITTED ON LABEL MACRO'
         AGO   .LBL0060
.LBL0050 ANOP
&LNAME   SETC  '&NAME'
.LBL0060 ANOP
&LNAME   DS    0H
         AIF   (&LBLCTL).LBLEXIT
         BAL   R15,TRACE000             LINK TO TRACE
         DC    CL8'&LNAME'              LABEL NAME
.LBLEXIT ANOP
         MEXIT
.GENMOD  ANOP
         AIF   (&LBLCTL).LBLEXIT
*---------------------------------------------------------------------*
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
TRACE000 DS    0H
         ST    R15,TRACER15             SAVE REGISTER 15
         MVC   TRACELBL,0(R15)          COPY LABEL
         ICM   R15,15,TRACECUR          CURRENT TRACE ENTRY ADDRESS
         BNZ   TRACE010                 ADD ENTRY TO TABLE
         GETMAIN R,LV=8000              STORAGE FOR 1000 ENTRIES
         LR    R15,R1                   SAVE FIRST ENTRY ADDRESS
         ST    R1,TRACE1ST              SAVE FIRST ENTRY ADDRESS
         ST    R1,TRACECUR              SET CURRENT ENTRY ADDRESS
         AH    R1,TRACEHSZ              ADDRESS OF LAST ENTRY
         ST    R1,TRACELST              SET LAST ENTRY ADDRESS
TRACE010 DS    0H
         CLM   R15,15,TRACELST          AT END OF TABLE?
         BNE   TRACE020                 NO
         L     R15,TRACE1ST             "WRAP" TO 1ST ENTRY
         B     TRACE030
TRACE020 DS    0H
         LA    R15,8(R15)               NEXT ENTRY
TRACE030 DS    0H
         ST    R15,TRACECUR             SAVE CURRENTY ENTRY
         MVC   0(8,R15),TRACELBL        COPY LABEL
         L     R15,TRACER15             RESTORE R15
         B     8(R15)                   RETURN
TRACEHSZ DC    Y(8000-8)                SIZE OF TRACE TABLE MINUS 1
TRACER15 DC    A(0)
         DC    CL8'TRACE1ST'            EYECATCHER
TRACE1ST DC    A(0)                     FIRST TRACE ENTRY ADDRESS
         DC    CL8'TRACECUR'            EYECATCHER
TRACECUR DC    A(0)                     CURRENT TRACE ENTRY
         DC    CL8'TRACELST'            EYECATCHER
TRACELST DC    A(0)                     LAST TRACE ENTRY
TRACELBL DC    CL8' '                   LABEL WORK AREA
         MEND
